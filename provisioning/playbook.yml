---
- hosts: all
  user: root
  sudo: yes

  #vars:

  vars_files:
    - production_vars.yml

  tasks:
    - name: Update apt cache
      apt: update_cache=yes

    - name: Ensure all system packages are at the latest version
      apt: upgrade=dist

    - name: Ensure sshd has the proper configuration
      template: src=templates/sshd_config dest=/etc/ssh/sshd_config owner=root group=root
      notify: restart ssh
      when: dev != True

    - name: Ensure firewall init script is in place
      template: src=templates/firewall dest=/etc/init.d/firewall owner=root group=root mode=0755
      when: dev != True

    - name: Ensure firewall will start at system startup
      service: name=firewall enabled=yes
      when: dev != True

    - name: Ensure usu user is present
      user: name=usu generate_ssh_key=yes append=yes groups='sudo' state=present

    - name: Ensure local user's public key is authorized for the new user
      authorized_key: user=usu key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: Ensure home directory is owned by the correct user
      file: path=/home/usu owner=usu group=usu state=directory

    - name: Ensure python-software-properties (add-apt-repository) is installed
      apt: pkg=$item state=present
      with_items:
       - python-software-properties
       - ntp
       - curl
       - git
       - vim
       - build-essential
       - monit
       - ssmtp

    - name: Ensure nginx's and newrelic's repo keys are present
      apt_key: url='$item' state=present
      with_items:
        - 'http://nginx.org/keys/nginx_signing.key'
        - 'https://download.newrelic.com/548C16BF.gpg'

    - name: Ensure required PPAs are present
      apt_repository: repo='$item' update_cache=yes
      with_items:
        - 'deb http://nginx.org/packages/ubuntu/ precise nginx'
        - 'deb-src http://nginx.org/packages/ubuntu/ precise nginx'
        - 'deb http://apt.newrelic.com/debian/ newrelic non-free'
        - 'ppa:chris-lea/node.js'
        - 'ppa:spuul/ruby'

    - name: Ensure required packages are installed
      apt: pkg='$item' state=present
      with_items:
        - nginx
        - nodejs
        - newrelic-sysmond
        - ruby2.0 # Ruby serve per il random tweeter di Woody
        - ruby2.0-dev

    - name: Ensure newrelic-sysmond's config is in place
      template: src=templates/nrsysmond.cfg dest=/etc/newrelic/nrsysmond.cfg
      when: dev != True

    - name: Ensure newrelic-sysmond is started and will be started at system startup
      service: name=newrelic-sysmond state=started enabled=yes
      when: dev != True

    - name: Ensure nginx sites* dirs are present
      file: path=/etc/nginx/$item state=directory
      with_items:
        - 'sites-available'
        - 'sites-enabled'

    - name: Ensure default nginx conf.d directory is deleted
      file: path=/etc/nginx/conf.d state=absent

    - name: Ensure nginx configuration file is at the latest version.
      copy: src=templates/nginx/nginx.conf dest=/etc/nginx/
      notify:
        - check nginx conf
        - reload nginx

    - name: Ensure nginx vhosts are at the latest version.
      template: src='$item' dest=/etc/nginx/sites-available/
      with_fileglob:
        - templates/nginx/sites-available/*
      notify:
        - check nginx conf
        - reload nginx

    - name: Ensure vhosts are enabled
      file: src=/etc/nginx/sites-available/$item dest=/etc/nginx/sites-enabled/$item owner=root group=root state=link
      with_items:
        - default
        - blog
        - chiaramimanchi

    - name: Ensure SSL certificates can only be read by root
      file: path=/etc/nginx/certs owner=root group=root mode=0400 state=directory

    - name: Ensure that SSL certificates are in place
      template: src='$item' dest=/etc/nginx/certs/
      with_fileglob:
        - files/certs/*
      notify:
        - check nginx conf
        - reload nginx

    - name: Ensure that nginx's proxy cache directory is present
      file: path=/var/cache/nginx owner=www-data group=www-data state=directory

    - name: Ensure nginx is started
      service: name=nginx state=started enabled=yes

    - name: Ensure ssmtp config is in place
      template: src=templates/ssmtp/ssmtp.conf dest=/etc/ssmtp

    - name: Ensure monit config files are in place
      template: src=templates/monit/monitrc dest=/etc/monit
      notify: restart monit

    - name: Checks whether node has already been deployed
      stat: path=/etc/init/blog-usu-production.conf
      register: st

    - name: Ensure monit config files are in place
      template: src='$item' dest=/etc/monit/conf.d
      with_fileglob:
        - templates/monit/conf.d/*
      notify: restart monit
      when: st.stat.exists is defined and st.stat.exists == True

    - name: Ensure bundler is installed
      gem: name=bundler state=present user_install=no

    - name: Ensure app init scripts are in place
      copy: src='$item' dest=/etc/init.d mode=0755
      with_items:
        - files/init/woody-responder
        - files/init/buzz-responder

  handlers:
    - name: check nginx conf
      command: nginx -t

    - name: reload nginx
      service: name=nginx state=reloaded

    - name: restart ssh
      service: name=ssh state=restarted

    - name: stop firewall
      service: name=firewall state=stopped

    - name: start firewall
      service: name=firewall state=started

    - name: restart monit
      service: name=monit state=restarted